/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package jingleheimercalendar;

import java.awt.Color;
import java.awt.Font;

public class TaskPanel extends javax.swing.JPanel {
    private Task task;
/**
 *
 * @author Brandon
 */
    public TaskPanel(Task t) {
        task = t;
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        priorityLabel = new javax.swing.JLabel();
        nameLabel = new javax.swing.JLabel();
        infoLabel = new javax.swing.JLabel();
        doneCheckBox = new javax.swing.JCheckBox();

        setBackground(new java.awt.Color(255, 255, 255));
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
        });

        priorityLabel.setFont(JingleheimerCalendar.defaultFont.deriveFont(Font.PLAIN, 18f));
        priorityLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        priorityLabel.setForeground(task.getCategoryColor());
        numToStringPriority();
        priorityLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                priorityLabelMouseClicked(evt);
            }
        });

        nameLabel.setFont(JingleheimerCalendar.defaultFont.deriveFont(Font.PLAIN, 14f));
        nameLabel.setText(task.getName());
        nameLabel.setForeground(task.getCategoryColor());
        nameLabel.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);

        infoLabel.setFont(JingleheimerCalendar.defaultFont.deriveFont(Font.PLAIN, 12f));
        infoLabel.setText(task.getInfo());
        infoLabel.setForeground(task.getCategoryColor());
        infoLabel.setVerticalAlignment(javax.swing.SwingConstants.TOP);

        doneCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                doneCheckBoxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(priorityLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(nameLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(infoLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 498, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(doneCheckBox)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(priorityLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(nameLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(infoLabel))
                    .addComponent(doneCheckBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>                        

    private void doneCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {
        task.setIsComplete(doneCheckBox.isSelected());
        checkCompleteness();
    }                                            

    public void checkCompleteness(){
        doneCheckBox.setSelected(task.isComplete());
        if(task.isComplete()){
            nameLabel.setForeground(new Color(200,200,200));
            infoLabel.setForeground(new Color(200,200,200));
            priorityLabel.setForeground(new Color(200,200,200)); 
        }else{
            nameLabel.setForeground(task.getCategoryColor());
            infoLabel.setForeground(task.getCategoryColor());
            priorityLabel.setForeground(task.getCategoryColor());
           
        }
    }
    
    private void priorityLabelMouseClicked(java.awt.event.MouseEvent evt) {
        if(!doneCheckBox.isSelected()){
            if(priorityLabel.getText().equals("! ! !")){
                priorityLabel.setText("! !");
                task.setPriority(2);
            }else if(priorityLabel.getText().equals("! !")){
                priorityLabel.setText("!");
                task.setPriority(1);
            }else if(priorityLabel.getText().equals("!")){
                priorityLabel.setText("! ! !");
                task.setPriority(3);
            }
        }
        UserCalendar.getInstance().sortTasks();
        JingleheimerCalendar.refreshCurrentView();
    }                                          

    private void formMouseClicked(java.awt.event.MouseEvent evt) {                                  
        CustomInfoTaskWindow c = new CustomInfoTaskWindow(task);
    }                                 

    private void numToStringPriority (){
       int i = task.getPriority();
       if ( i == 1 ){
           priorityLabel.setText("!");
       }else if ( i == 2){
           priorityLabel.setText("! !");
       }else if ( i == 3 ){
           priorityLabel.setText("! ! !");
       }
    }
    
    public Task getTask(){
        return task;
    }
       
    
    // Variables declaration - do not modify                     
    private javax.swing.JCheckBox doneCheckBox;
    private javax.swing.JLabel infoLabel;
    private javax.swing.JLabel nameLabel;
    private javax.swing.JLabel priorityLabel;
    // End of variables declaration                   
}

