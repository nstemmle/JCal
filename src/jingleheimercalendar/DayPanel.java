/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package jingleheimercalendar;

import javax.swing.BoxLayout;
import javax.swing.JPanel;
import javax.swing.SwingConstants;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.text.DateFormatSymbols;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
/**
 *
 * @author Brandon
 */
public class DayPanel extends javax.swing.JPanel {
    static Calendar c = Calendar.getInstance();
    private int currentMonth;
    
    /**
     * Creates new form DayView
     */
    public DayPanel(int width, int height) {
        c.set(Calendar.MILLISECOND,0);
        c.set(Calendar.SECOND,0);
        c.set(Calendar.MINUTE,0);
        c.set(Calendar.HOUR_OF_DAY,0);
        currentMonth = c.get(Calendar.MONTH);

        initComponents(width, height);
        dayNumText.setText(String.valueOf(c.get(Calendar.DAY_OF_MONTH)));
        monthText.setText(getMonth(c.get(Calendar.MONTH)) + " " + c.get(Calendar.YEAR));
        weekdayText.setText(getWeekDay((c.get(Calendar.DAY_OF_WEEK))));
       
        refresh();
    }
   
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents(int width, int height) {

        topPanel = new javax.swing.JPanel();
        dateInfoPanel = new javax.swing.JPanel();
        dayNumText = new javax.swing.JLabel();
        increment = new javax.swing.JLabel();
        decrement = new javax.swing.JLabel();
        weekdayText = new javax.swing.JLabel();
        monthText = new javax.swing.JLabel();
        alldayEventText = new javax.swing.JLabel();
        
        //monthPanel = new MonthPanel(372, 155, 0);
        monthPanel = new MonthPanelDayView(372, 155, 0);
        bottomPanel = new javax.swing.JPanel();
        eventPanel = new javax.swing.JPanel();
        eventHeaderPanel = new javax.swing.JPanel();
        eventHeaderText = new javax.swing.JLabel();
        eventContetPanel = new javax.swing.JPanel();
        eventScroll = new javax.swing.JScrollPane();
        eventScrollContentPanel = new javax.swing.JPanel();
        addEventText = new javax.swing.JLabel();
        taskPanel = new javax.swing.JPanel();
        taskHeaderPanel = new javax.swing.JPanel();
        taskHeaderText = new javax.swing.JLabel();
        taskContentPanel = new javax.swing.JPanel();
        taskScroll = new javax.swing.JScrollPane();
        taskScrollContentPanel = new javax.swing.JPanel();
        addTaskText = new javax.swing.JLabel();

       // setPreferredSize(new java.awt.Dimension(1280, 640));
      //  setSize(new java.awt.Dimension(1280, 640));

        topPanel.setBackground(new java.awt.Color(255, 255, 255));
        topPanel.setPreferredSize(new java.awt.Dimension(1280, 279));

        dateInfoPanel.setBackground(new java.awt.Color(255, 255, 255));

        dayNumText.setFont(JingleheimerCalendar.defaultFont.deriveFont(100f));
        dayNumText.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        dayNumText.setText("18");

        increment.setFont(JingleheimerCalendar.defaultFont.deriveFont(18f));
        increment.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        increment.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/rightArrow32.png"))); // NOI18N
        increment.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                incrementMouseClicked(evt);
            }
        });

        decrement.setFont(JingleheimerCalendar.defaultFont.deriveFont(18f));
        decrement.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        decrement.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/leftArrow32.png"))); // NOI18N
        decrement.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                decrementMouseClicked(evt);
            }
        });

        weekdayText.setFont(JingleheimerCalendar.defaultFont.deriveFont(36f));
        weekdayText.setText("Thursday");
        weekdayText.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);

        monthText.setFont(JingleheimerCalendar.defaultFont.deriveFont(24f));
        monthText.setText("November");
        monthText.setVerticalAlignment(javax.swing.SwingConstants.TOP);

        alldayEventText.setFont(JingleheimerCalendar.defaultFont.deriveFont(14f));
        alldayEventText.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        alldayEventText.setText("");
        

        javax.swing.GroupLayout dateInfoPanelLayout = new javax.swing.GroupLayout(dateInfoPanel);
        dateInfoPanel.setLayout(dateInfoPanelLayout);
        dateInfoPanelLayout.setHorizontalGroup(
            dateInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dateInfoPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(dateInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(alldayEventText, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(dateInfoPanelLayout.createSequentialGroup()
                        .addComponent(decrement, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(dayNumText, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(increment, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(dateInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(weekdayText, javax.swing.GroupLayout.DEFAULT_SIZE, 283, Short.MAX_VALUE)
                            .addComponent(monthText, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        dateInfoPanelLayout.setVerticalGroup(
            dateInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dateInfoPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(dateInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(increment, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(decrement, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(dayNumText, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, dateInfoPanelLayout.createSequentialGroup()
                        .addComponent(weekdayText, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(monthText, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(alldayEventText, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        //javax.swing.GroupLayout monthPanelLayout = new javax.swing.GroupLayout(monthPanel);
        monthPanel.setLayout(new javax.swing.BoxLayout(monthPanel, BoxLayout.Y_AXIS));
        //MonthPanel mv = new MonthPanelDayView(monthPanel.getWidth(),monthPanel.getHeight(),0);
        monthPanel.setFontSizeHeaders(16);
        monthPanel.setFontSizeOrdinals(16);
        monthPanel.setBackground(Color.white);
        //monthPanel.add(mv);
        
       /* monthPanelLayout.setHorizontalGroup(
            monthPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 372, Short.MAX_VALUE)
        );
        monthPanelLayout.setVerticalGroup(
            monthPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );*/

        javax.swing.GroupLayout topPanelLayout = new javax.swing.GroupLayout(topPanel);
        topPanel.setLayout(topPanelLayout);
        topPanelLayout.setHorizontalGroup(
            topPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(topPanelLayout.createSequentialGroup()
                .addGap(155, 155, 155)
                .addComponent(dateInfoPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 125, Short.MAX_VALUE)
                .addComponent(monthPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(155, 155, 155))
        );
        topPanelLayout.setVerticalGroup(
            topPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(topPanelLayout.createSequentialGroup()
                .addContainerGap(49, Short.MAX_VALUE)
                .addGroup(topPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(monthPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(dateInfoPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(71, Short.MAX_VALUE))
        );

        eventPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        eventPanel.setPreferredSize(new java.awt.Dimension(649, 300));

        eventHeaderPanel.setBackground(new java.awt.Color(102, 102, 102));

        eventHeaderText.setFont(JingleheimerCalendar.defaultFont.deriveFont(24f));
        eventHeaderText.setForeground(new java.awt.Color(255, 255, 255));
        eventHeaderText.setText("Events");

        javax.swing.GroupLayout eventHeaderPanelLayout = new javax.swing.GroupLayout(eventHeaderPanel);
        eventHeaderPanel.setLayout(eventHeaderPanelLayout);
        eventHeaderPanelLayout.setHorizontalGroup(
            eventHeaderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, eventHeaderPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(eventHeaderText, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        eventHeaderPanelLayout.setVerticalGroup(
            eventHeaderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(eventHeaderText, javax.swing.GroupLayout.DEFAULT_SIZE, 50, Short.MAX_VALUE)
        );

        eventContetPanel.setBackground(new java.awt.Color(255, 255, 255));

        eventScroll.setHorizontalScrollBar(null);

        javax.swing.BoxLayout eventScrollerPanelLayout = new javax.swing.BoxLayout(eventScrollContentPanel,BoxLayout.Y_AXIS);
       
        eventScrollContentPanel.setLayout(eventScrollerPanelLayout);
        JPanel centerPanel = new JPanel(); 
        centerPanel.setLayout(new BorderLayout());
        centerPanel.setBackground(Color.WHITE);
        javax.swing.JLabel noEventMessage = new javax.swing.JLabel("No Scheduled Events.");
        noEventMessage.setFont(JingleheimerCalendar.defaultFont.deriveFont(12f));
        noEventMessage.setHorizontalAlignment(SwingConstants.CENTER);
        centerPanel.add(noEventMessage, BorderLayout.CENTER); 

        eventScrollContentPanel.add(centerPanel);
        
        eventScroll.setViewportView(eventScrollContentPanel);
        
        eventScroll.setBorder(null);

        addEventText.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        addEventText.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/addIcon15x15.png"))); // NOI18N
        addEventText.setToolTipText("Create New Event");
        addEventText.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                addEventTextMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout eventContetPanelLayout = new javax.swing.GroupLayout(eventContetPanel);
        eventContetPanel.setLayout(eventContetPanelLayout);
        eventContetPanelLayout.setHorizontalGroup(
            eventContetPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(eventScroll)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, eventContetPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(addEventText, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        eventContetPanelLayout.setVerticalGroup(
            eventContetPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(eventContetPanelLayout.createSequentialGroup()
                .addComponent(eventScroll, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 7, Short.MAX_VALUE)
                .addComponent(addEventText)
                .addContainerGap())
        );

        javax.swing.GroupLayout eventPanelLayout = new javax.swing.GroupLayout(eventPanel);
        eventPanel.setLayout(eventPanelLayout);
        eventPanelLayout.setHorizontalGroup(
            eventPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(eventHeaderPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(eventContetPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        eventPanelLayout.setVerticalGroup(
            eventPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(eventPanelLayout.createSequentialGroup()
                .addComponent(eventHeaderPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(eventContetPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        taskPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        taskPanel.setPreferredSize(new java.awt.Dimension(649, 300));

        taskHeaderPanel.setBackground(new java.awt.Color(102, 102, 102));

        taskHeaderText.setFont(JingleheimerCalendar.defaultFont.deriveFont(24f));
        taskHeaderText.setForeground(new java.awt.Color(255, 255, 255));
        taskHeaderText.setText("Tasks");

        javax.swing.GroupLayout taskHeaderPanelLayout = new javax.swing.GroupLayout(taskHeaderPanel);
        taskHeaderPanel.setLayout(taskHeaderPanelLayout);
        taskHeaderPanelLayout.setHorizontalGroup(
            taskHeaderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, taskHeaderPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(taskHeaderText, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        taskHeaderPanelLayout.setVerticalGroup(
            taskHeaderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(taskHeaderText, javax.swing.GroupLayout.DEFAULT_SIZE, 50, Short.MAX_VALUE)
        );

        taskContentPanel.setBackground(new java.awt.Color(255, 255, 255));

        taskScroll.setHorizontalScrollBar(null);

        javax.swing.BoxLayout taskScrollerPanelLayout = new javax.swing.BoxLayout(taskScrollContentPanel,BoxLayout.Y_AXIS);
       
        taskScrollContentPanel.setLayout(taskScrollerPanelLayout);
        JPanel centerTaskPanel = new JPanel(); 
        centerTaskPanel.setLayout(new BorderLayout());
        centerTaskPanel.setBackground(Color.WHITE);
        javax.swing.JLabel noTaskMessage = new javax.swing.JLabel("No Tasks to Complete.");
        noTaskMessage.setFont(JingleheimerCalendar.defaultFont.deriveFont(12f));
        noTaskMessage.setHorizontalAlignment(SwingConstants.CENTER);
        centerTaskPanel.add(noTaskMessage, BorderLayout.CENTER); 

        taskScrollContentPanel.add(centerTaskPanel);
       
        taskScroll.setViewportView(taskScrollContentPanel);
        taskScroll.setBorder(null);

        addTaskText.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        addTaskText.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/addIcon15x15.png"))); // NOI18N
        addTaskText.setToolTipText("Create New Task");
        addTaskText.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                addTaskTextMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout taskContentPanelLayout = new javax.swing.GroupLayout(taskContentPanel);
        taskContentPanel.setLayout(taskContentPanelLayout);
        taskContentPanelLayout.setHorizontalGroup(
            taskContentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(taskScroll)
            .addGroup(taskContentPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(addTaskText, javax.swing.GroupLayout.PREFERRED_SIZE, 622, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        taskContentPanelLayout.setVerticalGroup(
            taskContentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(taskContentPanelLayout.createSequentialGroup()
                .addComponent(taskScroll, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(addTaskText)
                .addContainerGap())
        );

        javax.swing.GroupLayout taskPanelLayout = new javax.swing.GroupLayout(taskPanel);
        taskPanel.setLayout(taskPanelLayout);
        taskPanelLayout.setHorizontalGroup(
            taskPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(taskHeaderPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(taskContentPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        taskPanelLayout.setVerticalGroup(
            taskPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(taskPanelLayout.createSequentialGroup()
                .addComponent(taskHeaderPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(taskContentPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout bottomPanelLayout = new javax.swing.GroupLayout(bottomPanel);
        bottomPanel.setLayout(bottomPanelLayout);
        bottomPanelLayout.setHorizontalGroup(
            bottomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(bottomPanelLayout.createSequentialGroup()
                .addComponent(eventPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(taskPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        bottomPanelLayout.setVerticalGroup(
            bottomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(eventPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 330, Short.MAX_VALUE)
            .addComponent(taskPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 330, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(topPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(bottomPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(topPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 290, Short.MAX_VALUE)
                .addGap(0, 0, 0)
                .addComponent(bottomPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>                        

    private void decrementMouseClicked(java.awt.event.MouseEvent evt) {                                       
        c.set(Calendar.DAY_OF_MONTH, c.get(Calendar.DAY_OF_MONTH) - 1);
        dayNumText.setText(String.valueOf(c.get(Calendar.DAY_OF_MONTH)));
        monthText.setText(getMonth(c.get(Calendar.MONTH)) + " " + c.get(Calendar.YEAR));
        weekdayText.setText(getWeekDay((c.get(Calendar.DAY_OF_WEEK))));
        int monthDelta = (c.get(Calendar.MONTH) - monthPanel.getCurrentMonth()) + (12 * (c.get(Calendar.YEAR) - monthPanel.getCurrentYear()));
        monthPanel.changeMonthBy(monthDelta);
        changeHighlightedDay();
        refresh();
    }                                      

    private void incrementMouseClicked(java.awt.event.MouseEvent evt) {                                       
        c.set(Calendar.DAY_OF_MONTH, c.get(Calendar.DAY_OF_MONTH) + 1);
        dayNumText.setText(String.valueOf(c.get(Calendar.DAY_OF_MONTH)));
        monthText.setText(getMonth(c.get(Calendar.MONTH)) + " " + c.get(Calendar.YEAR));
        weekdayText.setText(getWeekDay((c.get(Calendar.DAY_OF_WEEK))));
        int monthDelta = (c.get(Calendar.MONTH) - monthPanel.getCurrentMonth()) + (12 * (c.get(Calendar.YEAR) - monthPanel.getCurrentYear()));
        monthPanel.changeMonthBy(monthDelta);
        changeHighlightedDay();
        refresh();
    }                                      

    private void addEventTextMouseClicked(java.awt.event.MouseEvent evt) { 
        if(eventPanelList.isEmpty())
            eventScrollContentPanel.removeAll();
        CreateEventPanel t = new CreateEventPanel(eventScrollContentPanel,alldayEventText,this,c);
        eventScrollContentPanel.add(t);
       
        validate();
         javax.swing.JScrollBar vertical = eventScroll.getVerticalScrollBar();
        vertical.setValue( vertical.getMaximum() );
    }                                         

    private void addTaskTextMouseClicked(java.awt.event.MouseEvent evt) { 
        
        taskScrollContentPanel.removeAll();
        CreateTaskPanel t = new CreateTaskPanel(taskScrollContentPanel,this);
        taskScrollContentPanel.add(t);
        
        validate();
        javax.swing.JScrollBar vertical = taskScroll.getVerticalScrollBar();
        vertical.setValue( vertical.getMaximum() );
    }                                        


    // Variables declaration - do not modify                     
    private javax.swing.JLabel addEventText;
    private javax.swing.JLabel addTaskText;
    private static javax.swing.JLabel alldayEventText;
    private javax.swing.JPanel bottomPanel;
    private javax.swing.JPanel dateInfoPanel;
    private javax.swing.JLabel dayNumText;
    private javax.swing.JLabel decrement;
    private javax.swing.JPanel eventContetPanel;
    private javax.swing.JPanel eventHeaderPanel;
    private javax.swing.JLabel eventHeaderText;
    private javax.swing.JPanel eventPanel;
    private javax.swing.JScrollPane eventScroll;
    private javax.swing.JPanel eventScrollContentPanel;
    private javax.swing.JLabel increment;
   // private javax.swing.JPanel monthPanel;
    private MonthPanelDayView monthPanel;
    private javax.swing.JLabel monthText;
    private javax.swing.JPanel taskContentPanel;
    private javax.swing.JPanel taskHeaderPanel;
    private javax.swing.JLabel taskHeaderText;
    private javax.swing.JPanel taskPanel;
    private javax.swing.JScrollPane taskScroll;
    private javax.swing.JPanel taskScrollContentPanel;
    private javax.swing.JPanel topPanel;
    private javax.swing.JLabel weekdayText;
    private ArrayList<EventPanel> eventPanelList = new ArrayList<EventPanel>();
    // End of variables declaration                                                                     
    
    public String getMonth(int month) {
        return new DateFormatSymbols().getMonths()[month];
    }
    public String getWeekDay(int dayOfWeek) {
        return new DateFormatSymbols().getWeekdays()[dayOfWeek];
    } 
    
    public Dimension getPreferredSize() {
                return new Dimension(1280,620);
    }

    public void changeHighlightedDay() {
        monthPanel.changeHighlightedDay(c);
    }

    public void changeDay(int day, int month, int year) {
        SimpleDateFormat df = new SimpleDateFormat("MM/dd/yyyy");
        int m = month + 1;
        String date = String.valueOf(month >= 10 ? m : "0" + m) + "/" + String.valueOf(day >= 10 ? day : "0" + day)
                + "/" + String.valueOf(year);
        try {
            c.setTime(df.parse(date));
        } catch (ParseException e) {
            e.printStackTrace();
        }
        refresh();
        dayNumText.setText(String.valueOf(c.get(Calendar.DAY_OF_MONTH)));
        monthText.setText(getMonth(c.get(Calendar.MONTH)) + " " + c.get(Calendar.YEAR));
        weekdayText.setText(getWeekDay((c.get(Calendar.DAY_OF_WEEK))));
        monthPanel.changeMonthBy(day, month, year);
        monthPanel.changeHighlightedDay(c);
        refresh();
    }

    public void resetEventPanel(){
        eventScrollContentPanel.removeAll();
        JPanel centerPanel = new JPanel(); 
        centerPanel.setLayout(new BorderLayout());
        centerPanel.setBackground(Color.WHITE);
        javax.swing.JLabel noEventMessage = new javax.swing.JLabel("No Scheduled Events.");
        noEventMessage.setFont(JingleheimerCalendar.defaultFont.deriveFont(12f));
        noEventMessage.setHorizontalAlignment(SwingConstants.CENTER);
        centerPanel.add(noEventMessage, BorderLayout.CENTER);
        eventPanelList.clear();
        eventScrollContentPanel.add(centerPanel);
    }
    
    public void resetTaskPanel(){
        taskScrollContentPanel.removeAll();
        JPanel centerTaskPanel = new JPanel(); 
        centerTaskPanel.setLayout(new BorderLayout());
        centerTaskPanel.setBackground(Color.WHITE);
        javax.swing.JLabel noTaskMessage = new javax.swing.JLabel("No Tasks To Complete.");
        noTaskMessage.setFont(JingleheimerCalendar.defaultFont.deriveFont(12f));
        noTaskMessage.setHorizontalAlignment(SwingConstants.CENTER);
        centerTaskPanel.add(noTaskMessage, BorderLayout.CENTER); 
        taskScrollContentPanel.add(centerTaskPanel);
    }
    
    public static void updateAllDayText(Date d){
        ArrayList<Event> e = UserCalendar.getInstance().getAllDayEventsByDate(d);
        String text ="";
        for(int i =0; i< e.size(); i++){
            int color = e.get(i).getCategoryColor().getRGB();
            String hex = Integer.toHexString(color).substring(2);
            String name = e.get(i).getName();
            if(text.equals("")){
            text = text+"<font color=#"+hex+">"+name+"</font>&nbsp&nbsp&nbsp ";
            } else {
                text = text+"|<font color=#"+hex+">&nbsp&nbsp&nbsp "+name+"</font>&nbsp&nbsp&nbsp";
            }
        }
        text = "<html>"+text+"</html>";
        alldayEventText.setText(text);
    }
    
    public void removeTask(Task t){
       UserCalendar.getInstance().removeTasks(t);
       refreshTaskPanel();
    }
    
    public void refreshTaskPanel(){
        //System.out.println("CALLED REFRESH");
        taskScrollContentPanel.removeAll();
        validate();
        
        if(UserCalendar.getInstance().getTasks().size() == 0){
           resetTaskPanel();
        }
       
       for(int i = 0 ; i < UserCalendar.getInstance().getTasks().size() ; i++){
           TaskPanel newPanel = new TaskPanel(UserCalendar.getInstance().getTasks().get(i));
           newPanel.checkCompleteness();
           if(i%2==0){
            newPanel.setBackground(new Color(255,255,255));
           }else{
            newPanel.setBackground(new Color(245,245,245));
           }
           taskScrollContentPanel.add(newPanel);
        }
       validate();
    }
    
    
    public void refreshEventPanel(){
        //System.out.println("CALLED REFRESH");
        eventScrollContentPanel.removeAll();
        validate();
        
        if(UserCalendar.getInstance().getEventsByDate(c.getTime()).size() == 0){
           resetEventPanel();
        }
       
       for(int i = 0 ; i < UserCalendar.getInstance().getEventsByDate(c.getTime()).size() ; i++){
           EventPanel newPanel = new EventPanel(UserCalendar.getInstance().getEventsByDate(c.getTime()).get(i));
           if(i%2==0){
            newPanel.setBackground(new Color(255,255,255));
           }else{
            newPanel.setBackground(new Color(245,245,245));
           }
           eventScrollContentPanel.add(newPanel);
        }
       validate();
    }
    
    public void refresh(){
       refreshEventPanel();
       refreshTaskPanel();
       updateAllDayText(c.getTime());
       revalidate();
    }
}
